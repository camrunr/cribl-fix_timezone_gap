{
  "id": "fix_timezone_gap",
  "conf": {
    "output": "default",
    "groups": {
      "r4S33B": {
        "name": "DEBUG: Create Test Events",
        "description": "Enable this to test some scenarios",
        "index": 1,
        "disabled": true
      },
      "wzLjXO": {
        "name": "Fix the time",
        "index": 2,
        "disabled": false,
        "description": "Either via lookup, or via logic"
      },
      "yndSqc": {
        "name": "DEBUG: Output",
        "index": 3,
        "description": "Sanity check",
        "disabled": true
      }
    },
    "asyncFuncTimeout": 1000,
    "functions": [
      {
        "filter": "true",
        "conf": {
          "comment": "Fix bad timezones =======\nAuthor: Jon Rust <jon@cribl.io>\n\nIf the host is in host_tzs.csv use the adjustment provided there (expecting column 'adj', with a value in seconds)\n\nElse: If the time is off by something close to a 30 minute boundary, add the snapped 30 minute boundary count to _time. 'Close' means +/- 10 seconds by default. Adjust as needed in the filter of the 2nd eval of Fix the time group (rule 7)\n\nExample: 'now() - _time' is off by +3600.230, that's 2 30 minute sections, and it's very close (230 ms). In this case, we'll add exactly 3600 to _time.\n\nExample: 'now() - _time' is off by -1804 seconds. We will subtract 1800 seconds from _time.\n\nExample: 'now() - _time' is off by 603 seconds. No change will be made as it's not close to a multiple of 1800."
        },
        "id": "comment"
      },
      {
        "filter": "true",
        "conf": {
          "add": [
            {
              "name": "fakedata",
              "value": "[`${C.Time.strftime(Date.now()/1000 + 10801,\"%Y/%m/%d %H:%M:%S\")} logging mclogface`,`${C.Time.strftime(Date.now()/1000 + 10802,\"%Y/%m/%d %H:%M:%S\")} logging mclogface`,`${C.Time.strftime(Date.now()/1000 + 10803,\"%Y/%m/%d %H:%M:%S\")} logging mclogface`]"
            }
          ]
        },
        "id": "eval",
        "disabled": true,
        "description": "Set the offset below in seconds by setting the event time (_time) forward or backward relative to Date.now()/1000",
        "groupId": "r4S33B"
      },
      {
        "filter": "true",
        "conf": {
          "srcExpr": "fakedata",
          "dstField": "_raw"
        },
        "id": "unroll",
        "groupId": "r4S33B",
        "disabled": true
      },
      {
        "filter": "true",
        "conf": {
          "add": [
            {
              "name": "_time",
              "value": "C.Time.strptime(_raw.match(/^[0-9\\/: ]+/)[0],\"%Y/%m/%d %H:%M:%S\")/1000"
            }
          ],
          "remove": [
            "fakedata"
          ]
        },
        "id": "eval",
        "groupId": "r4S33B",
        "disabled": true
      },
      {
        "filter": "C.Lookup('host_tzs.csv','host').match(host)",
        "conf": {
          "add": [
            {
              "name": "__adj_seconds",
              "value": "Number(C.Lookup('host_tzs.csv','host').match(host,'adj'))"
            },
            {
              "name": "_time",
              "value": "_time + __adj_seconds"
            },
            {
              "name": "time_adj",
              "value": "`${__adj_seconds/3600}h`"
            }
          ]
        },
        "id": "eval",
        "groupId": "wzLjXO",
        "description": "Use the lookup file to decide",
        "disabled": false
      },
      {
        "filter": "!time_adj",
        "conf": {
          "add": [
            {
              "name": "__time_diff",
              "value": "Math.round(Date.now()/1000 - _time,0)"
            },
            {
              "name": "__time_diff_abs",
              "value": "Math.abs(__time_diff)"
            },
            {
              "name": "__half_snap_diff_abs",
              "value": "__time_diff_abs % 1800"
            },
            {
              "name": "__half_snap",
              "value": "Math.round(__time_diff/1800,0)"
            }
          ]
        },
        "id": "eval",
        "description": "Calculate dome diffs",
        "groupId": "wzLjXO",
        "disabled": false
      },
      {
        "filter": "__half_snap && (1770 < __time_diff_abs < 86430 && __half_snap_diff_abs < 10)",
        "conf": {
          "add": [
            {
              "name": "_time",
              "value": "_time + __half_snap * 1800"
            },
            {
              "name": "time_adj",
              "value": "`${__half_snap/2}h`"
            }
          ]
        },
        "id": "eval",
        "description": "Only fix time for events that are roughly 30 minutes off up to 1 day off (plus or minus) and the gap from 30min snap is < 30 seconds",
        "groupId": "wzLjXO",
        "disabled": false
      },
      {
        "filter": "true",
        "conf": {
          "add": [
            {
              "name": "time_gap_sec",
              "value": "Math.round(_time - Date.now()/1000,0)"
            },
            {
              "name": "_time_string",
              "value": "C.Time.strftime(_time,\"%Y/%m/%d %H:%M:%S %Z\")"
            }
          ]
        },
        "id": "eval",
        "disabled": true,
        "groupId": "yndSqc"
      }
    ]
  }
}